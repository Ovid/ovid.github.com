#!/usr/bin/env perl

# vim: ft=perl

use lib 'lib';
use File::Spec::Functions qw(catfile);
use DateTime;
use Less::Script;
use Ovid::Site::Utils qw(use_smart_quotes);

GetOptions(
    \my %opt_for,
    'nocomments',    # disables comments for an entry
    'type=s',        # one of 'article' or 'blog'
    'description=s',
) or die "Bad options";

my $comments = $opt_for{nocomments} ? 0 : 1;
$opt_for{comments} = $comments;
$opt_for{type} //= '';

my @errors;
unless ( 'article' eq $opt_for{type} xor 'blog' eq $opt_for{type} ) {
    push @errors => "--type is required and must be one of 'article' or 'blog'";
}

unless (@ARGV) {
    push @errors =>
      'You should provide the title as the arguments to this script';
}

if (@errors) {
    warn join "\n" => @errors;
    die usage();
}

unless ( $opt_for{description} ) {
    say "Please enter a description for this $opt_for{type} entry:";
    chomp( my $description = <STDIN> );
    $opt_for{description} = $description;
}

my $title    = join( ' ' => @ARGV );
my $slug     = make_slug($title);
my $template = write_article_stub( $title, $slug, \%opt_for );
add_to_sqitch( $title, $slug, \%opt_for );
edit_article($template);    #exits this program

sub add_to_sqitch ( $title, $slug, $opt_for ) {
    my $dbh = dbh();
    $title = $dbh->quote($title);
    my $q_slug      = $dbh->quote($slug);
    my $type        = $dbh->quote( $opt_for->{type} );
    my $description = $dbh->quote( $opt_for->{description} );
    my $deploy      = <<"END";
-- Deploy ovid:data/$slug to sqlite

BEGIN;

    INSERT INTO articles (title, slug, description, article_type_id, sort_order)
         VALUES (
           $title,
           $q_slug,
           $description,
           (SELECT article_type_id FROM article_types WHERE type = $type),
           (SELECT max(sort_order) FROM articles) + 1 
         );

COMMIT;
END
    my $revert = <<"END";
-- Revert ovid:data/$slug to sqlite

BEGIN;

    DELETE FROM articles WHERE slug = $q_slug AND article_type_id = (SELECT article_type_id FROM article_types WHERE type = $type);

COMMIT;
END
    system( 'sqitch', 'add', "data/$slug" );
    splat( "sqitch/deploy/data/$slug.sql", $deploy );
    splat( "sqitch/revert/data/$slug.sql", $revert );
    system( 'sqitch', 'deploy', 'ovid' );
}

sub write_article_stub ( $title, $slug, $opt_for ) {
    my $directory = article_type( $opt_for->{type} )->{directory};
    my $contents  = template( $title, $directory, $slug, $opt_for );
    my $template  = catfile( 'root', $directory, "$slug.tt2markdown" );

    if ( -e $template ) {
        say "Refusing to overwrite the existing file at $template. Exiting.";
        exit 1;
    }

    open my $fh, '>', $template;
    print {$fh} $contents;
    close $fh;
    return $template;
}

sub edit_article ($template) {
    my $editor = $ENV{EDITOR} || 'vim';
    system $editor => $template;
}

sub template ( $title, $directory, $slug, $opt_for ) {
    my $ymd = DateTime->now->ymd;
    $title = use_smart_quotes($title);

    return
      sprintf <<'END' => $title, $directory, $slug, $opt_for->{comments}, $ymd;
[%%
    title            = '%s';
    type             = '%s';
    slug             = '%s';
    include_comments = %d;
    syntax_highlight = 1;
    date             = '%s';
    mathjax          = 0;
    # facebook         = 'babylon.jpg'; # 1,200 x 628 pixels recommended, but can be smaller
    # facebook_alt     = 'A cuneiform tablet with Babylonian numbers inscribed on it.';
    USE Ovid;
%%]
[%% WRAPPER include/wrapper.tt blogdown=1 -%%]

<!-- add HTML/markdown content here -->

<!-- example image
[%% INCLUDE include/image.tt
   align   = 'right',
   src      = "/static/images/bed.jpg"
   alt      = "A slightly messy bed"
   source   = 'https://unsplash.com/photos/OZiflZqq0N0',
   caption  = "Make that bed!"
%%]
-->

[%%- END %%]
END
}

sub usage {
    return
"Usage: $0 --type \$type 'My Awesome Title' --description Short description of content\n";
}

__END__

=head1 NAME

article - Write an article

=head1 SYNOPSIS

    perl bin/article --type article My Awesome Article
    perl bin/article --type blog My Awesome Article --nocomments
    perl bin/article --type blog My Awesome Article --description 'This is a longer description'

=head1 OPTIONS

    nocomments        If passed, comments are disabled for this article
    type              Must be one of 'article' or 'blog'
    description       A longer description of what the entry is about.

If you do not entry a description, you will be prompted for one.
