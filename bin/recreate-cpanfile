#!/usr/bin/env perl

# vim: filetype=perl

use lib 'lib';
use Less::Script;
use List::Util 'max';
use Module::ScanDeps 'scan_deps';
use Module::CoreList;
use File::Find::Rule;
use Try::Tiny;

# all of these are for MetaCPAN::Client
use CHI;
use WWW::Mechanize::Cached;
use HTTP::Tiny::Mech;
use MetaCPAN::Client;

my $mcpan = get_metacpan_client();

# yes, I can combine these. I prefer to be explicit
my @modules = File::Find::Rule->file->name('*.pm')->in('lib');
my @tests   = File::Find::Rule->file->name('*.t')->in('t');
my @scripts = grep { !/\.sw.$/ } File::Find::Rule->file->in('bin');

my %local = map { filename_to_module( $_, 'lib/' ) => 1 } @modules;

my $dependencies  = scan_deps( files => [ @modules, @tests, @scripts ] );
my %needs_install = get_modules( [ keys $dependencies->%* ], \%local );
write_cpanfile( \%needs_install );

sub write_cpanfile($needs_install) {
    my $max      = max map { length } keys $needs_install->%*;
    my $requires = '';
    foreach my $module ( sort keys $needs_install->%* ) {
        my $padding = ' ' x ( ( $max + 2 ) - length $module );
        $requires .=
          "requires '$module'$padding=> $needs_install->{$module};\n";
    }
    my $now      = localtime;
    my $cpanfile = <<~"CPANFILE";
    # vim: ft=perl
    #
    # Autogenerated via $0 on $now

    =comment

    Install all dependencies with:

        cpanm --installdeps .

    See https://metacpan.org/pod/CPAN::Meta::Spec#VERSION-NUMBERS for details.

    =cut

    $requires
    CPANFILE
    splat( 'cpanfile', $cpanfile );
}

sub get_modules ( $filenames, $is_local ) {

    # the following are not detected, so we force them
    my %modules = (
        'YAML::LibYAML'         => 0.83,
        'HTML::SimpleLinkExtor' => 1.273,
    );
    my $current = 1;
    my $total   = @$filenames;
    PACKAGE: foreach my $filename ( sort @$filenames ) {
        say "Processing $current out of $total";
        $current++;
        my $module_name = filename_to_module($filename) or next PACKAGE;
        next PACKAGE if $is_local->{$module_name};
        next PACKAGE if Module::CoreList::is_core($module_name);
        my $module;
        try {
            $module = $mcpan->module($module_name);
        }
        catch {
            my $error = $_;
            say STDERR "Failed to fetch $module_name: $error";
        };
        next PACKAGE unless $module;
        my ( $top_level_module, $version ) = guess_distribution($module);
        next PACKAGE if is_blacklisted($top_level_module);
        $modules{$top_level_module} = $version;
    }
    return %modules;
}

sub guess_distribution ($module) {

    # I hate this! But I haven't figured out a better way to get the
    # distribution *module* name. There are tons of exceptions.
    my $distribution = $module->distribution;
    my $version      = $module->version;
    $distribution =~ s/-\Q$version$/ /;
    $distribution =~ s{-}{::}g;           # not guaranteed
    return ( $distribution, $version );
}

sub filename_to_module ( $filename, $prefix = '' ) {
    return unless $filename =~ s/\.pm$//;
    $filename =~ s/^\Q$prefix//;
    $filename =~ s{/}{::}g;
    return $filename;
}

sub get_metacpan_client {
    return MetaCPAN::Client->new(
        ua => HTTP::Tiny::Mech->new(
            mechua => WWW::Mechanize::Cached->new(
                cache => CHI->new(
                    driver   => 'File',
                    root_dir => '/tmp/metacpan-cache',
                ),
            ),
        ),
    );
}

sub is_blacklisted ($module) {

    # modules which somehow got found in dependency list, but aren't actual
    # dependencies
    state $blacklist = {
        map { $_ => 1 }
          qw/
          DBD::Pg
          Moose::Autobox
          MooseX::Attribute::Chained
          MooseX::Enumeration
          /
    };
    return exists $blacklist->{$module};
}
